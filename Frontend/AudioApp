classdef AudioApp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure         matlab.ui.Figure
        UIAxes           matlab.ui.control.UIAxes
        StartButton      matlab.ui.control.Button
        PauseButton      matlab.ui.control.Button
        StopButton       matlab.ui.control.Button
        TextArea         matlab.ui.control.TextArea
        SaveButton       matlab.ui.control.Button
        ExportButton     matlab.ui.control.Button
        Timer            timer
        recorder         audiorecorder
        audioData        double
    end

    methods (Access = private)

        function processAudio(app)
            if isvalid(app.recorder) && isrecording(app.recorder)
                % Get audio data
                app.audioData = getaudiodata(app.recorder);
                % Perform FFT to get frequency
                Y = fft(app.audioData);
                L = length(app.audioData);
                P2 = abs(Y/L);
                P1 = P2(1:L/2+1);
                P1(2:end-1) = 2*P1(2:end-1);
                f = (0:(L/2))/L * app.recorder.SampleRate;

                % Plot the frequency spectrum
                plot(app.UIAxes, f, P1);
                xlim(app.UIAxes, [0 5000]); % Limit x-axis for better visualization

                % Find the peak frequency
                [~, idx] = max(P1);
                peakFrequency = f(idx);

                % Identify the note from the frequency
                [note, midi_number_bin] = identifyNoteFromFrequency(peakFrequency);

                % Display note and MIDI number in Text Area
                app.TextArea.Value = {['Detected Note: ', note], ['MIDI Number (8-bits): ', midi_number_bin]};
            else
                app.TextArea.Value = 'Recorder is not recording.';
            end
        end

        function startRecording(app)
            if isempty(app.recorder) || ~isvalid(app.recorder)
                app.recorder = audiorecorder(44100, 16, 1);
            end
            if ~isrecording(app.recorder)
                record(app.recorder);
                if strcmp(app.Timer.Running, 'off')
                    start(app.Timer);
                end
            else
                disp('Recorder is already running.');
            end
        end

        function pauseRecording(app)
            if isvalid(app.recorder) && isrecording(app.recorder)
                pause(app.recorder);
            end
            if strcmp(app.Timer.Running, 'on')
                stop(app.Timer);
            end
        end

        function stopRecording(app)
            if isvalid(app.recorder) && isrecording(app.recorder)
                stop(app.recorder);
            end
            if strcmp(app.Timer.Running, 'on')
                stop(app.Timer);
            end
            app.TextArea.Value = 'Recording stopped.';
        end

        function initializeTimer(app)
            app.Timer = timer('ExecutionMode', 'fixedRate', 'Period', 1, ...
                              'TimerFcn', @(~,~) app.processAudio());
        end
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: StartButton
        function StartButtonPushed(app, event)
            startRecording(app);
        end

        % Button pushed function: PauseButton
        function PauseButtonPushed(app, event)
            pauseRecording(app);
        end

        % Button pushed function: StopButton
        function StopButtonPushed(app, event)
            stopRecording(app);
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 640 480];
            app.UIFigure.Name = 'UI Figure';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Title')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.Position = [81 303 480 113];

            % Create StartButton
            app.StartButton = uibutton(app.UIFigure, 'push');
            app.StartButton.ButtonPushedFcn = createCallbackFcn(app, @StartButtonPushed, true);
            app.StartButton.Position = [81 243 100 22];
            app.StartButton.Text = 'Start';

            % Create PauseButton
            app.PauseButton = uibutton(app.UIFigure, 'push');
            app.PauseButton.ButtonPushedFcn = createCallbackFcn(app, @PauseButtonPushed, true);
            app.PauseButton.Position = [201 243 100 22];
            app.PauseButton.Text = 'Pause';

            % Create StopButton
            app.StopButton = uibutton(app.UIFigure, 'push');
            app.StopButton.ButtonPushedFcn = createCallbackFcn(app, @StopButtonPushed, true);
            app.StopButton.Position = [321 243 100 22];
            app.StopButton.Text = 'Stop';

            % Create TextArea
            app.TextArea = uitextarea(app.UIFigure);
            app.TextArea.Position = [81 91 480 121];

            % Create SaveButton
            app.SaveButton = uibutton(app.UIFigure, 'push');
            app.SaveButton.Position = [81 45 100 22];
            app.SaveButton.Text = 'Save';

            % Create ExportButton
            app.ExportButton = uibutton(app.UIFigure, 'push');
            app.ExportButton.Position = [201 45 100 22];
            app.ExportButton.Text = 'Export';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';

            % Initialize Timer
            initializeTimer(app);
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = AudioApp

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
            if isvalid(app.Timer)
                stop(app.Timer)
                delete(app.Timer)
            end
            if isvalid(app.recorder)
                stop(app.recorder)
                delete(app.recorder)
            end
        end
    end
end

function [note, midi_number_bin] = identifyNoteFromFrequency(frequency)
    % Define the table of notes and their frequencies
    notes = {'A0', 'A#0', 'B0', 'C1', 'C#1', 'D1', 'D#1', 'E1', 'F1', 'F#1', 'G1', 'G#1', ...
             'A1', 'A#1', 'B1', 'C2', 'C#2', 'D2', 'D#2', 'E2', 'F2', 'F#2', 'G2', 'G#2', ...
             'A2', 'A#2', 'B2', 'C3', 'C#3', 'D3', 'D#3', 'E3', 'F3', 'F#3', 'G3', 'G#3', ...
             'A3', 'A#3', 'B3', 'C4', 'C#4', 'D4', 'D#4', 'E4', 'F4', 'F#4', 'G4', 'G#4', ...
             'A4', 'A#4', 'B4', 'C5', 'C#5', 'D5', 'D#5', 'E5', 'F5', 'F#5', 'G5', 'G#5', ...
             'A5', 'A#5', 'B5', 'C6', 'C#6', 'D6', 'D#6', 'E6', 'F6', 'F#6', 'G6', 'G#6', ...
             'A6', 'A#6', 'B6', 'C7', 'C#7', 'D7', 'D#7', 'E7', 'F7', 'F#7', 'G7', 'G#7', ...
             'A7', 'A#7', 'B7', 'C8'};

    frequencies = [27.500, 29.135, 30.868, 32.703, 34.648, 36.708, 38.891, 41.203, 43.654, 46.249, 48.999, 51.913, ...
                   55.000, 58.270, 61.735, 65.406, 69.296, 73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, ...
                   110.000, 116.541, 123.471, 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, ...
                   207.652, 220.000, 233.082, 246.942, 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, ...
                   391.995, 415.305, 440.000, 466.164, 493.883, 523.251, 554.365, 587.330, 622.254, 659.255, 698.456, ...
                   739.989, 783.991, 830.609, 880.000, 932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508, 1318.510, ...
                   1396.913, 1479.978, 1567.982, 1661.219, 1760.000, 1864.655, 1975.533, 2093.005, 2217.461, 2349.318, ...
                   2489.016, 2637.020, 2793.826, 2959.955, 3135.963, 3322.438, 3520.000, 3729.310, 3951.066, 4186.009];

    % Find the closest frequency
    [~, idx] = min(abs(frequencies - frequency));

    % Get the corresponding note and MIDI number
    note = notes{idx};
    midi_number = idx + 20; % MIDI numbers start at 21 for A0

    % Convert MIDI number to 8-bit binary string
    midi_number_bin = dec2bin(midi_number, 8);
end
